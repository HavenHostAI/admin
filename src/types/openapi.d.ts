/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User login
         * @description Authenticate user and create session
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * User logout
         * @description End user session and clear authentication
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logout successful */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LogoutResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current session
         * @description Retrieve current user session information
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Session information retrieved */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SessionResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh authentication token
         * @description Refresh expired authentication token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RefreshResponse"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                500: components["responses"]["InternalServerError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        LoginRequest: {
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /** @example password123 */
            password: string;
        };
        LoginResponse: {
            /** @example true */
            success?: boolean;
            data?: {
                user?: components["schemas"]["User"];
                session?: components["schemas"]["Session"];
                /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                access_token?: string;
            };
        };
        LogoutResponse: {
            /** @example true */
            success?: boolean;
            /** @example Logged out successfully */
            message?: string;
        };
        SessionResponse: {
            /** @example true */
            success?: boolean;
            data?: components["schemas"]["Session"];
        };
        RefreshResponse: {
            /** @example true */
            success?: boolean;
            data?: {
                /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
                access_token?: string;
            };
        };
        User: {
            /** @example user_123 */
            id: string;
            /**
             * Format: email
             * @example user@example.com
             */
            email: string;
            /** @example John Doe */
            name: string;
            /**
             * Format: uri
             * @example https://example.com/avatar.jpg
             */
            image?: string;
            /**
             * @default viewer
             * @example viewer
             * @enum {string}
             */
            role: "admin" | "editor" | "viewer";
            /**
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            email_verified?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updated_at: string;
        };
        Session: {
            user: components["schemas"]["User"];
            /**
             * Format: date-time
             * @example 2024-12-31T23:59:59Z
             */
            expires: string;
        };
        ErrorResponse: {
            /** @example false */
            success?: boolean;
            /** @example Authentication failed */
            error?: string;
            /** @example [
             *       "Invalid email or password"
             *     ] */
            details?: string[];
        };
    };
    responses: {
        /** @description Bad request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;

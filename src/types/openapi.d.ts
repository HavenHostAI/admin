/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign in with email and password.
         * @description Wraps the `auth.signIn` Convex action. Returns an opaque session token
         *     alongside the serialized user document on success.
         *
         */
        post: operations["authSignIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user via email and password.
         * @description Wraps the `auth.signUp` Convex action. Creates a new user, optionally
         *     seeding a company and applying invitation metadata.
         *
         */
        post: operations["authSignUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/validate-session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate an existing session token.
         * @description Returns session metadata together with the associated user when the token is active.
         */
        post: operations["authValidateSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sign-out": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke an existing session token.
         * @description Removes the session that matches the provided token.
         */
        post: operations["authSignOut"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send a company invitation email.
         * @description Wraps the `company.inviteUser` Convex action. Requires an active owner
         *     session token. Creates or updates an invitation and dispatches email via
         *     SendGrid when credentials are configured.
         *
         */
        post: operations["companyInviteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query a paginated list of documents from a table.
         * @description Executes the generic `admin.list` query.
         */
        post: operations["adminList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch a single document by id.
         * @description Executes the generic `admin.get` query.
         */
        post: operations["adminGet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/getMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fetch multiple documents by id.
         * @description Executes the generic `admin.getMany` query.
         */
        post: operations["adminGetMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/getManyReference": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List documents referencing another resource.
         * @description Executes the `admin.getManyReference` query used for reference inputs.
         */
        post: operations["adminGetManyReference"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Insert a new document into a table.
         * @description Executes the generic `admin.create` mutation.
         */
        post: operations["adminCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update an existing document.
         * @description Executes the generic `admin.update` mutation.
         */
        post: operations["adminUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply the same update to multiple documents.
         * @description Executes the `admin.updateMany` mutation.
         */
        post: operations["adminUpdateMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a single document by id.
         * @description Executes the generic `admin.del` mutation.
         */
        post: operations["adminDelete"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete multiple documents by id.
         * @description Executes the `admin.deleteMany` mutation.
         */
        post: operations["adminDeleteMany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/normalizeId": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Normalize an external id into a Convex document id.
         * @description Executes the `admin.normalizeId` query.
         */
        post: operations["adminNormalizeId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignInRequest: {
            /** Format: email */
            email: string;
            password: string;
            /** @default true */
            rememberMe: boolean;
        };
        SignUpRequest: {
            /** Format: email */
            email: string;
            password: string;
            name: string;
            /** @description Required when creating a brand new company. */
            companyName?: string;
            /** @example America/New_York */
            companyTimezone?: string;
            /** @description Preferred company plan tier. */
            companyPlan?: string;
            /** @description Token from an invitation email when joining an existing company. */
            invitationToken?: string;
        };
        ValidateSessionRequest: {
            /** @description Session token issued by `auth.signIn` or `auth.signUp`. */
            token: string;
        };
        SignOutRequest: {
            /** @description Session token to revoke. */
            token: string;
        };
        SessionWithUser: {
            /** @description Session token used to authenticate subsequent requests. */
            token: string;
            user: components["schemas"]["User"];
        };
        /** @description Session data and associated user or `null` when the token is not valid. */
        SessionValidation: {
            session?: components["schemas"]["Session"];
            user?: components["schemas"]["User"];
        } | null;
        Session: {
            token: string;
            userId: string;
            /** @description ISO-8601 timestamp representing expiry. */
            expiresAt: string;
            /** @description ISO-8601 timestamp when the session was created. */
            createdAt: string;
            /** @description ISO-8601 timestamp when the session last changed. */
            updatedAt: string;
            ipAddress?: string | null;
            userAgent?: string | null;
        };
        InviteUserRequest: {
            /** @description Active session token belonging to a company owner. */
            sessionToken: string;
            /** Format: email */
            email: string;
            name?: string | null;
            /**
             * @description Role assigned to the invited user.
             * @enum {string|null}
             */
            role?: "owner" | "manager" | "agent" | null;
        };
        InviteUserResponse: {
            /** @example true */
            success: boolean;
        };
        ListRequest: {
            table: components["schemas"]["TableName"];
            pagination?: components["schemas"]["PaginationInput"];
            sort?: components["schemas"]["SortInput"];
            filter?: components["schemas"]["FilterInput"];
        };
        GetRequest: {
            table: components["schemas"]["TableName"];
            id: string;
        };
        GetManyRequest: {
            table: components["schemas"]["TableName"];
            ids: string[];
        };
        GetManyReferenceRequest: {
            table: components["schemas"]["TableName"];
            /** @description Field name that stores the foreign key. */
            target: string;
            /** @description Foreign id to match against the `target` field. */
            id: string;
            pagination?: components["schemas"]["PaginationInput"];
            sort?: components["schemas"]["SortInput"];
            filter?: components["schemas"]["FilterInput"];
        };
        MutateRequest: {
            table: components["schemas"]["TableName"];
            data: components["schemas"]["DocumentInput"];
            meta?: components["schemas"]["MetaInput"];
        };
        UpdateRequest: {
            table: components["schemas"]["TableName"];
            id: string;
            data: components["schemas"]["DocumentInput"];
            meta?: components["schemas"]["MetaInput"];
        };
        UpdateManyRequest: {
            table: components["schemas"]["TableName"];
            ids: string[];
            data: components["schemas"]["DocumentInput"];
            meta?: components["schemas"]["MetaInput"];
        };
        DeleteRequest: {
            table: components["schemas"]["TableName"];
            id: string;
            meta?: components["schemas"]["MetaInput"];
            previousData?: components["schemas"]["DocumentInput"];
        };
        DeleteManyRequest: {
            table: components["schemas"]["TableName"];
            ids: string[];
            meta?: components["schemas"]["MetaInput"];
        };
        NormalizeIdRequest: {
            table: components["schemas"]["TableName"];
            id: string;
        };
        NormalizeIdResponse: {
            /** @description Convex document identifier. */
            normalizedId: string;
        };
        ListResponse: {
            data: components["schemas"]["AdminDocument"][];
            /** Format: int32 */
            total: number;
        };
        DocumentResponse: components["schemas"]["AdminDocument"];
        GetManyResponse: components["schemas"]["AdminDocument"][];
        BulkIdsResponse: {
            data: string[];
        };
        PaginationInput: {
            page?: number;
            perPage?: number;
        };
        SortInput: {
            field?: string;
            /** @enum {string} */
            order?: "ASC" | "DESC";
        };
        FilterInput: {
            [key: string]: unknown;
        };
        DocumentInput: {
            [key: string]: unknown;
        };
        MetaInput: {
            [key: string]: unknown;
        };
        /**
         * @description Convex document returned by the generic admin helpers. The `_id` field
         *     is always present together with the table-specific fields described in
         *     the referenced schemas.
         *
         * @example {
         *       "_id": "h7yhwq6g1z2z8f13rvw8y2x4",
         *       "name": "Acme Hospitality",
         *       "plan": "starter",
         *       "timezone": "America/New_York",
         *       "createdAt": 1704067200000
         *     }
         */
        AdminDocument: components["schemas"]["Company"] | components["schemas"]["User"] | components["schemas"]["Property"] | components["schemas"]["PropertyConfig"] | components["schemas"]["Number"] | components["schemas"]["Faq"] | components["schemas"]["LocalRec"] | components["schemas"]["Integration"] | components["schemas"]["Interaction"] | components["schemas"]["Escalation"] | components["schemas"]["Notification"] | components["schemas"]["BillingUsage"] | components["schemas"]["AuditLog"] | components["schemas"]["CompanyInvitation"] | components["schemas"]["AuthAccount"] | components["schemas"]["AuthSession"] | components["schemas"]["AuthVerification"];
        /** @enum {string} */
        TableName: "companies" | "users" | "properties" | "propertyConfigs" | "numbers" | "faqs" | "localRecs" | "integrations" | "interactions" | "escalations" | "notifications" | "billingUsage" | "auditLogs" | "companyInvitations" | "authSessions" | "authAccounts" | "authVerifications";
        Company: {
            _id: string;
            name: string;
            timezone: string;
            plan: string;
            branding?: {
                /** Format: uri */
                logoUrl?: string | null;
                greetingName?: string | null;
            } | null;
            /** Format: int64 */
            createdAt: number;
        };
        User: {
            /** @description Convex internal identifier. */
            _id?: string;
            /** @description Stable Better Auth user identifier. */
            id: string;
            companyId?: string | null;
            /** Format: email */
            email: string;
            role?: string | null;
            status?: string | null;
            name?: string | null;
            /** Format: uri */
            image?: string | null;
            emailVerified: boolean;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            updatedAt: number;
        };
        Property: {
            _id: string;
            companyId: string;
            name: string;
            address?: {
                street?: string | null;
                city?: string | null;
                state?: string | null;
                postalCode?: string | null;
                country?: string | null;
            } | null;
            timeZone?: string | null;
            flags?: {
                noCodeOverPhone?: boolean | null;
                alwaysEscalateLockout?: boolean | null;
                upsellEnabled?: boolean | null;
            } | null;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            updatedAt: number;
        };
        PropertyConfig: {
            _id: string;
            propertyId: string;
            access?: {
                lockType?: string;
                code?: string | null;
                instructions?: string;
                backup?: string | null;
            } | null;
            wifi?: {
                ssid?: string;
                password?: string;
                tips?: string | null;
            } | null;
            checkin?: {
                time?: string;
                instructions?: string;
            } | null;
            checkout?: {
                time?: string;
                instructions?: string;
                eligibleForLate?: boolean | null;
            } | null;
            parking?: {
                instructions?: string;
                notes?: string | null;
                permitRequired?: boolean | null;
            } | null;
            rules?: {
                pets?: boolean | null;
                smoking?: boolean | null;
                parties?: boolean | null;
                quietHours?: {
                    start?: string;
                    end?: string;
                } | null;
                extraFees?: {
                    feeName?: string;
                    amount?: number;
                } | null;
            } | null;
            amenities?: {
                ac?: boolean | null;
                heating?: boolean | null;
                laundry?: boolean | null;
                tv?: boolean | null;
                streamingApps?: string[] | null;
                hotTub?: boolean | null;
                pool?: boolean | null;
                other?: string | null;
            } | null;
            contacts?: {
                onCall?: {
                    name: string;
                    phone: string;
                    role: string;
                }[];
                vendors?: {
                    type: string;
                    name: string;
                    phone: string;
                }[] | null;
                emergency?: {
                    police?: string | null;
                    fire?: string | null;
                    medical?: string | null;
                } | null;
            } | null;
            upsells?: {
                lateCheckout?: {
                    price?: number;
                } | null;
                midStayClean?: {
                    price?: number;
                } | null;
                other?: {
                    name: string;
                    price: number;
                }[] | null;
            } | null;
            languages?: string[] | null;
        };
        Number: {
            _id: string;
            companyId: string;
            /** @description E.164 formatted phone number. */
            e164: string;
            assignedPropertyId?: string | null;
            assignedQueue?: string | null;
            hours?: {
                daily?: {
                    day: string;
                    open: string;
                    close: string;
                }[] | null;
                fallbackNumber?: string | null;
            } | null;
            /** Format: int64 */
            createdAt: number;
        };
        Faq: {
            _id: string;
            propertyId: string;
            text: string;
            tags: string[];
            embedding?: number[] | null;
            /** Format: int64 */
            updatedAt: number;
        };
        LocalRec: {
            _id: string;
            propertyId: string;
            name: string;
            category: string;
            /** Format: uri */
            url?: string | null;
            tips?: string | null;
            hours?: string | null;
            embedding?: number[] | null;
            /** Format: int64 */
            updatedAt: number;
        };
        Integration: {
            _id: string;
            companyId: string;
            type: string;
            status: string;
            secretsEncrypted?: string | null;
            /** Format: int64 */
            lastSyncAt?: number | null;
        };
        Interaction: {
            _id: string;
            companyId: string;
            propertyId: string;
            channel: string;
            intent: string;
            result: string;
            durationSec: number;
            /** Format: int64 */
            createdAt: number;
            piiHash?: string | null;
            transcriptRef?: string | null;
        };
        Escalation: {
            _id: string;
            companyId: string;
            propertyId: string;
            priority: string;
            topic: string;
            status: string;
            assigneeContact?: string | null;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            resolvedAt?: number | null;
            summary?: string | null;
            transcriptRef?: string | null;
        };
        Notification: {
            _id: string;
            escalationId?: string | null;
            companyId: string;
            type: string;
            to: string;
            status: string;
            attempts: number;
            lastError?: string | null;
            /** Format: int64 */
            createdAt: number;
        };
        BillingUsage: {
            _id: string;
            companyId: string;
            /** @description Billing month in YYYY-MM format. */
            month: string;
            units: number;
            minutes: number;
            amountCents: number;
        };
        AuditLog: {
            _id: string;
            companyId: string;
            actorUserId: string;
            entityType: string;
            entityId: string;
            action: string;
            diff?: {
                [key: string]: unknown;
            } | null;
            /** Format: int64 */
            createdAt: number;
        };
        CompanyInvitation: {
            _id: string;
            token: string;
            companyId: string;
            /** Format: email */
            email: string;
            invitedByUserId: string;
            role?: string | null;
            status: string;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            expiresAt: number;
        };
        AuthAccount: {
            _id: string;
            id: string;
            userId: string;
            providerId: string;
            accountId: string;
            password?: string | null;
            accessToken?: string | null;
            refreshToken?: string | null;
            idToken?: string | null;
            /** Format: int64 */
            accessTokenExpiresAt?: number | null;
            /** Format: int64 */
            refreshTokenExpiresAt?: number | null;
            scope?: string | null;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            updatedAt: number;
        };
        AuthSession: {
            _id: string;
            id: string;
            userId: string;
            token: string;
            /** Format: int64 */
            expiresAt: number;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            updatedAt: number;
            ipAddress?: string | null;
            userAgent?: string | null;
        };
        AuthVerification: {
            _id: string;
            id: string;
            identifier: string;
            value: string;
            /** Format: int64 */
            expiresAt: number;
            /** Format: int64 */
            createdAt: number;
            /** Format: int64 */
            updatedAt: number;
        };
        ErrorResponse: {
            /** @example Unable to sign in */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    authSignIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequest"];
            };
        };
        responses: {
            /** @description Authentication succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionWithUser"];
                };
            };
            /** @description Authentication failed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    authSignUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            /** @description Account created and signed in. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionWithUser"];
                };
            };
            /** @description Input validation failure or invitation error. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    authValidateSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateSessionRequest"];
            };
        };
        responses: {
            /** @description Session information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionValidation"];
                };
            };
            /** @description Token is missing or invalid. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    authSignOut: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignOutRequest"];
            };
        };
        responses: {
            /** @description Session revoked or nothing to revoke. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request payload. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    companyInviteUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InviteUserRequest"];
            };
        };
        responses: {
            /** @description Invitation created or refreshed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteUserResponse"];
                };
            };
            /** @description Validation or business rule failure. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Session token is not valid for inviting users. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListRequest"];
            };
        };
        responses: {
            /** @description Matching documents. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse"];
                };
            };
            /** @description Invalid table or filter arguments. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminGet: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetRequest"];
            };
        };
        responses: {
            /** @description Matching document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentResponse"];
                };
            };
            /** @description Invalid table or identifier. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Document not found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminGetMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetManyRequest"];
            };
        };
        responses: {
            /** @description Matching documents. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetManyResponse"];
                };
            };
            /** @description Invalid table or identifiers. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminGetManyReference: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetManyReferenceRequest"];
            };
        };
        responses: {
            /** @description Matching documents. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResponse"];
                };
            };
            /** @description Invalid reference or table arguments. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MutateRequest"];
            };
        };
        responses: {
            /** @description Newly inserted document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentResponse"];
                };
            };
            /** @description Invalid table or payload. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRequest"];
            };
        };
        responses: {
            /** @description Updated document. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentResponse"];
                };
            };
            /** @description Invalid table, identifier, or payload. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminUpdateMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateManyRequest"];
            };
        };
        responses: {
            /** @description List of ids that were updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkIdsResponse"];
                };
            };
            /** @description Invalid table, identifiers, or payload. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminDelete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteRequest"];
            };
        };
        responses: {
            /** @description Deleted document as it existed prior to removal. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentResponse"];
                };
            };
            /** @description Invalid table or identifier. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminDeleteMany: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeleteManyRequest"];
            };
        };
        responses: {
            /** @description List of ids that were deleted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkIdsResponse"];
                };
            };
            /** @description Invalid table or identifiers. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    adminNormalizeId: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NormalizeIdRequest"];
            };
        };
        responses: {
            /** @description Normalized Convex identifier. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NormalizeIdResponse"];
                };
            };
            /** @description Invalid id or table. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}

---
globs: *.ts,*.sql
description: Use snake_case for database columns
---

# Database Column Naming

Always use snake_case for database column names and table names.

## Guidelines

- **Use snake_case** for all database column names
- **Use snake_case** for table names
- **Use snake_case** for index names
- **Use snake_case** for constraint names
- **Use snake_case** for foreign key column names
- **Avoid camelCase** in database schema
- **Avoid PascalCase** in database schema

## Examples

### Correct Database Schema

```typescript
// Drizzle schema example
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  first_name: varchar("first_name", { length: 255 }).notNull(),
  last_name: varchar("last_name", { length: 255 }).notNull(),
  email_address: varchar("email_address", { length: 255 }).notNull().unique(),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
  is_active: boolean("is_active").default(true).notNull(),
});

export const posts = pgTable("posts", {
  id: serial("id").primaryKey(),
  user_id: integer("user_id")
    .references(() => users.id)
    .notNull(),
  title: varchar("title", { length: 255 }).notNull(),
  content: text("content"),
  published_at: timestamp("published_at"),
  created_at: timestamp("created_at").defaultNow().notNull(),
  updated_at: timestamp("updated_at").defaultNow().notNull(),
});
```

### SQL Examples

```sql
-- Correct table creation
CREATE TABLE user_profiles (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(id),
    bio TEXT,
    avatar_url VARCHAR(500),
    social_media_links JSONB,
    created_at TIMESTAMP DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMP DEFAULT NOW() NOT NULL
);

-- Correct index creation
CREATE INDEX idx_user_profiles_user_id ON user_profiles(user_id);
CREATE INDEX idx_users_email_address ON users(email_address);
```

### Avoid These Patterns

```typescript
// ❌ Don't use camelCase
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  firstName: varchar("firstName", { length: 255 }), // ❌ Wrong
  lastName: varchar("lastName", { length: 255 }), // ❌ Wrong
  emailAddress: varchar("emailAddress", { length: 255 }), // ❌ Wrong
  createdAt: timestamp("createdAt"), // ❌ Wrong
});

// ❌ Don't use PascalCase
export const users = pgTable("Users", {
  // ❌ Wrong table name
  Id: serial("Id").primaryKey(), // ❌ Wrong
  FirstName: varchar("FirstName", { length: 255 }), // ❌ Wrong
});
```

## Naming Conventions

### Column Names

- Use descriptive names: `user_id`, `created_at`, `is_active`
- Use consistent suffixes: `_id` for foreign keys, `_at` for timestamps
- Use boolean prefixes: `is_`, `has_`, `can_`, `should_`

### Table Names

- Use plural form: `users`, `posts`, `user_profiles`
- Use descriptive names: `user_sessions`, `password_resets`
- Keep names concise but clear

### Index Names

- Prefix with `idx_`: `idx_users_email_address`
- Include table and column: `idx_posts_user_id`
- Use descriptive names for composite indexes: `idx_posts_user_id_created_at`

## Migration Files

When creating migrations, follow the same snake_case convention:

```typescript
// Migration example
export async function up(db: DrizzleD1Database) {
  await db.schema
    .createTable("user_preferences")
    .addColumn("id", "integer", (col) => col.primaryKey().autoIncrement())
    .addColumn("user_id", "integer", (col) =>
      col.notNull().references("users.id"),
    )
    .addColumn("theme_preference", "varchar", (col) => col.default("light"))
    .addColumn("email_notifications", "boolean", (col) => col.default(true))
    .addColumn("created_at", "timestamp", (col) => col.defaultNow().notNull())
    .execute();
}
```

---
globs: *.test.ts,*.test.tsx,*.spec.ts,*.spec.tsx
description: Use Vitest for unit tests, Testing Library for component tests, and Playwright for e2e tests
---

# Testing Stack

Use the following testing tools for different types of tests in this project.

## Testing Tools

- **Vitest**: Unit tests and integration tests
- **Testing Library**: Component tests and user interaction tests
- **Playwright**: End-to-end tests and browser automation

## Test File Organization

```
src/
├── __tests__/
│   ├── unit/           # Vitest unit tests
│   │   ├── utils.test.ts
│   │   ├── services.test.ts
│   │   └── repositories.test.ts
│   ├── components/     # Testing Library component tests
│   │   ├── Button.test.tsx
│   │   ├── UserForm.test.tsx
│   │   └── UserList.test.tsx
│   └── integration/    # Vitest integration tests
│       ├── api.test.ts
│       └── auth.test.ts
├── tests/
│   └── e2e/           # Playwright e2e tests
│       ├── auth.spec.ts
│       ├── user-management.spec.ts
│       └── admin-dashboard.spec.ts
```

## Vitest - Unit Tests

### Configuration

```typescript
// vitest.config.ts
import { defineConfig } from "vitest/config";
import { resolve } from "path";

export default defineConfig({
  test: {
    globals: true,
    environment: "node",
    setupFiles: ["./src/__tests__/setup.ts"],
  },
  resolve: {
    alias: {
      "@": resolve(__dirname, "./src"),
    },
  },
});
```

### Unit Test Examples

```typescript
// src/__tests__/unit/utils.test.ts
import { describe, it, expect } from "vitest";
import { formatDate, calculateAge, validateEmail } from "@/utils/helpers";

describe("formatDate", () => {
  it("should format date correctly", () => {
    const date = new Date("2024-01-15");
    expect(formatDate(date)).toBe("January 15, 2024");
  });

  it("should handle invalid dates", () => {
    expect(formatDate(new Date("invalid"))).toBe("Invalid Date");
  });
});

describe("calculateAge", () => {
  it("should calculate age correctly", () => {
    const birthDate = new Date("1990-01-01");
    const currentDate = new Date("2024-01-01");
    expect(calculateAge(birthDate, currentDate)).toBe(34);
  });
});

describe("validateEmail", () => {
  it("should validate correct email addresses", () => {
    expect(validateEmail("test@example.com")).toBe(true);
    expect(validateEmail("user.name+tag@domain.co.uk")).toBe(true);
  });

  it("should reject invalid email addresses", () => {
    expect(validateEmail("invalid-email")).toBe(false);
    expect(validateEmail("@domain.com")).toBe(false);
    expect(validateEmail("user@")).toBe(false);
  });
});
```

### Service Layer Tests

```typescript
// src/__tests__/unit/services/user.service.test.ts
import { describe, it, expect, vi, beforeEach } from "vitest";
import { UserService } from "@/services/user.service";
import type { UserRepository } from "@/repositories/interfaces/user.repository";

describe("UserService", () => {
  let userService: UserService;
  let mockUserRepository: UserRepository;

  beforeEach(() => {
    mockUserRepository = {
      findById: vi.fn(),
      findByEmail: vi.fn(),
      create: vi.fn(),
      update: vi.fn(),
      delete: vi.fn(),
      findAll: vi.fn(),
      count: vi.fn(),
    };
    userService = new UserService(mockUserRepository);
  });

  describe("createUser", () => {
    it("should create user successfully", async () => {
      const userData = {
        first_name: "John",
        last_name: "Doe",
        email_address: "john@example.com",
      };

      const createdUser = {
        id: 1,
        ...userData,
        created_at: new Date(),
        updated_at: new Date(),
        is_active: true,
      };

      vi.mocked(mockUserRepository.findByEmail).mockResolvedValue(null);
      vi.mocked(mockUserRepository.create).mockResolvedValue(createdUser);

      const result = await userService.createUser(userData);

      expect(mockUserRepository.findByEmail).toHaveBeenCalledWith(
        userData.email_address,
      );
      expect(mockUserRepository.create).toHaveBeenCalledWith(userData);
      expect(result).toEqual(createdUser);
    });

    it("should throw error if email already exists", async () => {
      const userData = {
        first_name: "John",
        last_name: "Doe",
        email_address: "john@example.com",
      };

      const existingUser = {
        id: 1,
        ...userData,
        created_at: new Date(),
        updated_at: new Date(),
        is_active: true,
      };

      vi.mocked(mockUserRepository.findByEmail).mockResolvedValue(existingUser);

      await expect(userService.createUser(userData)).rejects.toThrow(
        "User with this email already exists",
      );
    });
  });
});
```

## Testing Library - Component Tests

### Configuration

```typescript
// src/__tests__/setup.ts
import "@testing-library/jest-dom";
import { cleanup } from "@testing-library/react";
import { afterEach } from "vitest";

afterEach(() => {
  cleanup();
});
```

### Component Test Examples

```typescript
// src/__tests__/components/Button.test.tsx
import { describe, it, expect, vi } from "vitest";
import { render, screen, fireEvent } from "@testing-library/react";
import { Button } from "@/components/ui/button";

describe("Button", () => {
  it("should render with correct text", () => {
    render(<Button>Click me</Button>);
    expect(screen.getByRole("button", { name: "Click me" })).toBeInTheDocument();
  });

  it("should handle click events", () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Click me</Button>);

    fireEvent.click(screen.getByRole("button"));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it("should be disabled when disabled prop is true", () => {
    render(<Button disabled>Click me</Button>);
    expect(screen.getByRole("button")).toBeDisabled();
  });

  it("should apply correct variant classes", () => {
    render(<Button variant="destructive">Delete</Button>);
    const button = screen.getByRole("button");
    expect(button).toHaveClass("bg-destructive");
  });
});
```

### Form Component Tests

```typescript
// src/__tests__/components/UserForm.test.tsx
import { describe, it, expect, vi } from "vitest";
import { render, screen, fireEvent, waitFor } from "@testing-library/react";
import userEvent from "@testing-library/user-event";
import { UserForm } from "@/components/UserForm";

describe("UserForm", () => {
  it("should render form fields", () => {
    render(<UserForm onSuccess={vi.fn()} />);

    expect(screen.getByLabelText(/first name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/last name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByRole("button", { name: /create user/i })).toBeInTheDocument();
  });

  it("should submit form with valid data", async () => {
    const user = userEvent.setup();
    const onSuccess = vi.fn();

    render(<UserForm onSuccess={onSuccess} />);

    await user.type(screen.getByLabelText(/first name/i), "John");
    await user.type(screen.getByLabelText(/last name/i), "Doe");
    await user.type(screen.getByLabelText(/email/i), "john@example.com");
    await user.click(screen.getByRole("button", { name: /create user/i }));

    await waitFor(() => {
      expect(onSuccess).toHaveBeenCalled();
    });
  });

  it("should show validation errors for invalid data", async () => {
    const user = userEvent.setup();
    render(<UserForm onSuccess={vi.fn()} />);

    await user.type(screen.getByLabelText(/email/i), "invalid-email");
    await user.click(screen.getByRole("button", { name: /create user/i }));

    await waitFor(() => {
      expect(screen.getByText(/invalid email/i)).toBeInTheDocument();
    });
  });
});
```

## Playwright - E2E Tests

### Configuration

```typescript
// playwright.config.ts
import { defineConfig, devices } from "@playwright/test";

export default defineConfig({
  testDir: "./tests/e2e",
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: "html",
  use: {
    baseURL: "http://localhost:3000",
    trace: "on-first-retry",
  },
  projects: [
    {
      name: "chromium",
      use: { ...devices["Desktop Chrome"] },
    },
    {
      name: "firefox",
      use: { ...devices["Desktop Firefox"] },
    },
    {
      name: "webkit",
      use: { ...devices["Desktop Safari"] },
    },
  ],
  webServer: {
    command: "pnpm dev",
    url: "http://localhost:3000",
    reuseExistingServer: !process.env.CI,
  },
});
```

### E2E Test Examples

```typescript
// tests/e2e/auth.spec.ts
import { test, expect } from "@playwright/test";

test.describe("Authentication", () => {
  test("should login successfully", async ({ page }) => {
    await page.goto("/login");

    await page.fill('[data-testid="email-input"]', "admin@example.com");
    await page.fill('[data-testid="password-input"]', "password123");
    await page.click('[data-testid="login-button"]');

    await expect(page).toHaveURL("/dashboard");
    await expect(page.locator('[data-testid="user-menu"]')).toBeVisible();
  });

  test("should show error for invalid credentials", async ({ page }) => {
    await page.goto("/login");

    await page.fill('[data-testid="email-input"]', "invalid@example.com");
    await page.fill('[data-testid="password-input"]', "wrongpassword");
    await page.click('[data-testid="login-button"]');

    await expect(page.locator('[data-testid="error-message"]')).toBeVisible();
    await expect(page.locator('[data-testid="error-message"]')).toContainText(
      "Invalid credentials",
    );
  });

  test("should logout successfully", async ({ page }) => {
    // Login first
    await page.goto("/login");
    await page.fill('[data-testid="email-input"]', "admin@example.com");
    await page.fill('[data-testid="password-input"]', "password123");
    await page.click('[data-testid="login-button"]');

    // Logout
    await page.click('[data-testid="user-menu"]');
    await page.click('[data-testid="logout-button"]');

    await expect(page).toHaveURL("/login");
  });
});
```

### User Management E2E Tests

```typescript
// tests/e2e/user-management.spec.ts
import { test, expect } from "@playwright/test";

test.describe("User Management", () => {
  test.beforeEach(async ({ page }) => {
    // Login as admin
    await page.goto("/login");
    await page.fill('[data-testid="email-input"]', "admin@example.com");
    await page.fill('[data-testid="password-input"]', "password123");
    await page.click('[data-testid="login-button"]');
    await page.goto("/users");
  });

  test("should create new user", async ({ page }) => {
    await page.click('[data-testid="create-user-button"]');

    await page.fill('[data-testid="first-name-input"]', "John");
    await page.fill('[data-testid="last-name-input"]', "Doe");
    await page.fill('[data-testid="email-input"]', "john.doe@example.com");
    await page.click('[data-testid="save-user-button"]');

    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
    await expect(page.locator("text=John Doe")).toBeVisible();
  });

  test("should edit existing user", async ({ page }) => {
    await page.click('[data-testid="edit-user-button"]');

    await page.fill('[data-testid="first-name-input"]', "Jane");
    await page.click('[data-testid="save-user-button"]');

    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
    await expect(page.locator("text=Jane Doe")).toBeVisible();
  });

  test("should delete user", async ({ page }) => {
    await page.click('[data-testid="delete-user-button"]');
    await page.click('[data-testid="confirm-delete-button"]');

    await expect(page.locator('[data-testid="success-message"]')).toBeVisible();
    await expect(page.locator("text=John Doe")).not.toBeVisible();
  });
});
```

## Package.json Scripts

```json
{
  "scripts": {
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage",
    "test:watch": "vitest --watch",
    "e2e": "playwright test",
    "e2e:ui": "playwright test --ui",
    "e2e:headed": "playwright test --headed",
    "e2e:debug": "playwright test --debug"
  }
}
```

## Best Practices

### Unit Tests

- Test individual functions and methods
- Mock external dependencies
- Use descriptive test names
- Test edge cases and error conditions
- Keep tests fast and isolated

### Component Tests

- Test user interactions, not implementation details
- Use `data-testid` attributes for reliable element selection
- Test accessibility features
- Mock API calls and external services
- Test loading and error states

### E2E Tests

- Test critical user journeys
- Use page object model for complex pages
- Test across different browsers
- Include visual regression tests when needed
- Keep tests independent and parallelizable

## Test Data Management

```typescript
// src/__tests__/fixtures/user.fixtures.ts
export const mockUsers = [
  {
    id: 1,
    first_name: "John",
    last_name: "Doe",
    email_address: "john@example.com",
    created_at: new Date("2024-01-01"),
    updated_at: new Date("2024-01-01"),
    is_active: true,
  },
  {
    id: 2,
    first_name: "Jane",
    last_name: "Smith",
    email_address: "jane@example.com",
    created_at: new Date("2024-01-02"),
    updated_at: new Date("2024-01-02"),
    is_active: false,
  },
];
```

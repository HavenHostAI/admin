---
alwaysApply: true
description: Prefer pnpm commands over npm/yarn
---

# Prefer pnpm Commands

Always use pnpm commands instead of npm or yarn for package management in this project.

## Guidelines

- **Use `pnpm`** for all package management operations
- **Avoid `npm`** commands unless absolutely necessary
- **Avoid `yarn`** commands unless absolutely necessary
- **Use pnpm scripts** defined in package.json
- **Follow pnpm best practices** for workspace management

## Common Commands

### Package Installation

```bash
# ✅ Use pnpm
pnpm install
pnpm add react
pnpm add -D typescript
pnpm add -O @types/node

# ❌ Avoid npm
npm install
npm install react
npm install --save-dev typescript
npm install --save-optional @types/node

# ❌ Avoid yarn
yarn install
yarn add react
yarn add -D typescript
yarn add -O @types/node
```

### Development Scripts

```bash
# ✅ Use pnpm
pnpm dev
pnpm build
pnpm test
pnpm lint
pnpm format
pnpm type-check

# ❌ Avoid npm
npm run dev
npm run build
npm run test
npm run lint
npm run format
npm run type-check

# ❌ Avoid yarn
yarn dev
yarn build
yarn test
yarn lint
yarn format
yarn type-check
```

### Package Management

```bash
# ✅ Use pnpm
pnpm remove react
pnpm update
pnpm outdated
pnpm audit
pnpm list
pnpm why react

# ❌ Avoid npm
npm uninstall react
npm update
npm outdated
npm audit
npm list
npm why react

# ❌ Avoid yarn
yarn remove react
yarn upgrade
yarn outdated
yarn audit
yarn list
yarn why react
```

### Workspace Commands

```bash
# ✅ Use pnpm workspace commands
pnpm -r build
pnpm -r test
pnpm -r lint
pnpm --filter @myorg/package build
pnpm --filter @myorg/package add react

# ❌ Avoid npm workspace commands
npm run build --workspaces
npm run test --workspaces
npm run lint --workspaces
```

## Package.json Scripts

Ensure package.json scripts use pnpm:

```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "format": "prettier --write .",
    "type-check": "tsc --noEmit",
    "test": "vitest",
    "test:ui": "vitest --ui",
    "test:coverage": "vitest --coverage"
  }
}
```

## Benefits of pnpm

- **Faster installation**: Uses hard links and symlinks
- **Disk space efficient**: Shared dependency storage
- **Strict dependency resolution**: Prevents phantom dependencies
- **Better workspace support**: Native monorepo support
- **Security**: Better isolation of dependencies
- **Compatibility**: Drop-in replacement for npm

## Configuration Files

### .npmrc

```ini
# Use pnpm registry
registry=https://registry.npmjs.org/

# Enable strict peer dependencies
strict-peer-dependencies=true

# Use pnpm store
store-dir=~/.pnpm-store

# Enable shamefully-hoist for compatibility
shamefully-hoist=true
```

### pnpm-workspace.yaml (for monorepos)

```yaml
packages:
  - "packages/*"
  - "apps/*"
  - "tools/*"
```

## CI/CD Integration

### GitHub Actions

```yaml
# ✅ Use pnpm in CI
- name: Setup pnpm
  uses: pnpm/action-setup@v2
  with:
    version: 8

- name: Get pnpm store directory
  shell: bash
  run: |
    echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

- name: Setup pnpm cache
  uses: actions/cache@v3
  with:
    path: ${{ env.STORE_PATH }}
    key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
    restore-keys: |
      ${{ runner.os }}-pnpm-store-

- name: Install dependencies
  run: pnpm install --frozen-lockfile
```

## Migration from npm/yarn

### From npm

```bash
# Remove node_modules and package-lock.json
rm -rf node_modules package-lock.json

# Install with pnpm
pnpm install
```

### From yarn

```bash
# Remove node_modules and yarn.lock
rm -rf node_modules yarn.lock

# Install with pnpm
pnpm install
```

## Troubleshooting

### Common Issues

```bash
# Clear pnpm cache
pnpm store prune

# Check pnpm version
pnpm --version

# Update pnpm
npm install -g pnpm@latest

# Check for phantom dependencies
pnpm list --depth=0
```

### Performance Issues

```bash
# Use pnpm with specific settings
pnpm install --prefer-offline
pnpm install --no-optional
pnpm install --ignore-scripts
```

## Documentation References

When documenting commands or providing examples:

- Always use `pnpm` in README files
- Update installation instructions to use pnpm
- Ensure CI/CD documentation uses pnpm
- Update development setup guides

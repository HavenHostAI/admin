---
alwaysApply: true
description: Write conventional commits (feat/fix/chore/etc.)
---

# Conventional Commits

Always use conventional commit format for all git commits in this project.

## Format

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

## Commit Types

### Primary Types

- **feat**: A new feature
- **fix**: A bug fix
- **docs**: Documentation only changes
- **style**: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **perf**: A code change that improves performance
- **test**: Adding missing tests or correcting existing tests
- **chore**: Changes to the build process or auxiliary tools and libraries such as documentation generation

### Additional Types

- **ci**: Changes to our CI configuration files and scripts
- **build**: Changes that affect the build system or external dependencies
- **revert**: Reverts a previous commit

## Examples

### Features

```bash
# New feature
feat: add user authentication system

# Feature with scope
feat(auth): add JWT token validation

# Feature with breaking change
feat(api): change user endpoint response format

BREAKING CHANGE: The user endpoint now returns user data in a nested 'data' object instead of directly.
```

### Bug Fixes

```bash
# Simple bug fix
fix: resolve memory leak in user service

# Bug fix with scope
fix(ui): correct button alignment in user form

# Bug fix with issue reference
fix: prevent duplicate user creation

Fixes #123
```

### Documentation

```bash
# Documentation updates
docs: update API documentation for user endpoints

# README updates
docs: add installation instructions to README

# Code comments
docs: add JSDoc comments to user service methods
```

### Style Changes

```bash
# Code formatting
style: format code with prettier

# Linting fixes
style: fix ESLint warnings in user components

# Import organization
style: organize imports in user service
```

### Refactoring

```bash
# Code refactoring
refactor: extract user validation logic to separate utility

# Architecture changes
refactor(api): restructure user endpoints for better organization

# Performance refactoring
refactor: optimize user query performance
```

### Performance

```bash
# Performance improvements
perf: optimize user list loading with pagination

# Database optimization
perf(db): add index to user email field

# Bundle size optimization
perf: reduce bundle size by removing unused dependencies
```

### Tests

```bash
# Adding tests
test: add unit tests for user service

# Test improvements
test: improve user form component test coverage

# Test fixes
test: fix flaky user authentication tests
```

### Chores

```bash
# Dependency updates
chore: update dependencies to latest versions

# Build process changes
chore: update webpack configuration

# Tooling updates
chore: update ESLint configuration

# Package management
chore: add pnpm lockfile
```

### CI/CD

```bash
# CI configuration
ci: add GitHub Actions workflow for testing

# Deployment changes
ci: update deployment configuration for staging

# Build pipeline
ci: add automated dependency updates
```

### Build

```bash
# Build system changes
build: update webpack to version 5

# Dependencies
build: add new development dependencies

# Configuration
build: update TypeScript configuration
```

### Revert

```bash
# Revert commits
revert: revert "feat: add user authentication system"

# Revert with reason
revert: revert "fix: resolve memory leak in user service"

This reverts commit abc123. The fix caused issues with user session management.
```

## Scopes

Use scopes to indicate the area of the codebase affected:

### Common Scopes

- **auth**: Authentication and authorization
- **api**: API endpoints and routes
- **ui**: User interface components
- **db**: Database related changes
- **config**: Configuration files
- **deps**: Dependencies
- **docs**: Documentation
- **test**: Testing related changes
- **ci**: Continuous integration
- **build**: Build system

### Examples with Scopes

```bash
feat(auth): add OAuth2 integration
fix(api): resolve user endpoint validation error
docs(ui): update component documentation
refactor(db): optimize user queries
chore(deps): update React to version 18
test(api): add integration tests for user endpoints
```

## Breaking Changes

Indicate breaking changes in the footer:

```bash
feat(api): change user response format

BREAKING CHANGE: The user API now returns user data in a nested 'data' object.
Update your client code to access user properties via response.data.user.

Before:
{
  "id": 1,
  "name": "John Doe"
}

After:
{
  "data": {
    "user": {
      "id": 1,
      "name": "John Doe"
    }
  }
}
```

## Issue References

Reference issues in the footer:

```bash
fix: resolve user authentication bug

Fixes #123
Closes #456
Resolves #789
```

## Multi-line Commits

For complex changes, use the body to provide more details:

```bash
feat(auth): implement multi-factor authentication

Add support for TOTP-based two-factor authentication:
- Generate QR codes for authenticator apps
- Validate TOTP tokens during login
- Store backup codes for account recovery
- Add UI components for 2FA setup

Closes #234
```

## Commit Message Guidelines

### Description

- Use imperative mood ("add feature" not "added feature")
- Start with lowercase letter
- No period at the end
- Maximum 50 characters for the subject line
- Be descriptive but concise

### Body

- Wrap at 72 characters
- Explain what and why, not how
- Use bullet points for multiple changes
- Reference issues and pull requests

### Footer

- Reference issues with "Fixes #123"
- Indicate breaking changes with "BREAKING CHANGE:"
- Use "Co-authored-by:" for multiple authors

## Examples by Context

### Linear Issue Integration

```bash
feat(HAV-24): implement user login and logout functionality

- Add JWT token authentication
- Implement login form with validation
- Add logout functionality with token cleanup
- Update user state management

References: Linear HAV-24
```

### Feature Development

```bash
feat(user-management): add user role management

- Add role assignment interface
- Implement role-based permissions
- Update user service with role validation
- Add tests for role management

Closes #45
```

### Bug Fixes

```bash
fix(auth): resolve session timeout issue

The session was expiring prematurely due to incorrect token validation.
This fix ensures proper token lifetime calculation and extends
session duration to match the configured timeout.

Fixes #67
```

### Documentation Updates

```bash
docs: update API documentation for v2.0

- Add new endpoint documentation
- Update authentication examples
- Include error response schemas
- Add rate limiting information
```

### Dependency Updates

```bash
chore(deps): update React and Next.js to latest versions

- Update React to 18.2.0
- Update Next.js to 13.4.0
- Update related dependencies
- Fix breaking changes in components

BREAKING CHANGE: Some components may need updates due to React 18 changes
```

## Automation

### Commitizen Integration

```json
{
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  }
}
```

### Husky Pre-commit Hook

```bash
#!/bin/sh
# .husky/commit-msg
npx --no -- commitlint --edit $1
```

### Commitlint Configuration

```javascript
// commitlint.config.js
module.exports = {
  extends: ["@commitlint/config-conventional"],
  rules: {
    "type-enum": [
      2,
      "always",
      [
        "feat",
        "fix",
        "docs",
        "style",
        "refactor",
        "perf",
        "test",
        "chore",
        "ci",
        "build",
        "revert",
      ],
    ],
  },
};
```

## Best Practices

1. **Be Consistent**: Always use conventional commit format
2. **Be Descriptive**: Write clear, concise commit messages
3. **Use Scopes**: Include relevant scopes when applicable
4. **Reference Issues**: Link commits to issues and PRs
5. **Indicate Breaking Changes**: Always note breaking changes
6. **Keep It Simple**: One logical change per commit
7. **Use Present Tense**: Write in imperative mood
8. **Be Specific**: Avoid vague descriptions like "fix stuff"

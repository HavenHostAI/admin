---
alwaysApply: true
description: Always use TypeScript over plain JavaScript
---

# TypeScript Usage

Always prefer TypeScript over plain JavaScript in this project.

## Guidelines

- **Use `.ts` files** for TypeScript modules and utilities
- **Use `.tsx` files** for React components with TypeScript
- **Avoid `.js` files** unless absolutely necessary for specific tooling
- **Define proper types** for all functions, variables, and interfaces
- **Use strict TypeScript configuration** with proper type checking

## File Extensions

- **`.ts`** - TypeScript modules, utilities, and non-React code
- **`.tsx`** - React components with TypeScript
- **`.js`** - Only for configuration files that require it (e.g., `next.config.js`, `prettier.config.js`)

## Type Definitions

Always define types for:

- Function parameters and return types
- Component props interfaces
- API response types
- Database schema types
- State management types

## Examples

### Correct TypeScript Usage

```typescript
// Define interfaces for props
interface ButtonProps {
  children: React.ReactNode;
  onClick: () => void;
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
}

// Type function parameters and return values
const calculateTotal = (items: Item[]): number => {
  return items.reduce((sum, item) => sum + item.price, 0);
};

// Type component props
const Button: React.FC<ButtonProps> = ({ children, onClick, variant = 'primary', disabled = false }) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      className={`btn btn-${variant}`}
    >
      {children}
    </button>
  );
};
```

### Avoid Plain JavaScript

```javascript
// ❌ Don't use plain JavaScript
const Button = ({ children, onClick, variant, disabled }) => {
  return (
    <button onClick={onClick} disabled={disabled}>
      {children}
    </button>
  );
};
```

## Configuration

Ensure `tsconfig.json` is properly configured with:

- Strict type checking enabled
- Proper module resolution
- Target modern JavaScript features
- Include all necessary paths and types

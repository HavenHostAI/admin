openapi: 3.0.3
info:
  title: HavenHost Admin API
  description: Admin API for HavenHost platform
  version: 1.0.0
  contact:
    name: API Support
    email: support@havenhost.com

servers:
  - url: https://api.havenhost.com/v1
    description: Production server
  - url: http://localhost:3000/api/v1
    description: Development server

paths:
  /auth/login:
    post:
      summary: User login
      description: Authenticate user and create session
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/logout:
    post:
      summary: User logout
      description: End user session and clear authentication
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/session:
    get:
      summary: Get current session
      description: Retrieve current user session information
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Session information retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    post:
      summary: Refresh authentication token
      description: Refresh expired authentication token
      tags:
        - Authentication
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          maxLength: 255
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          maxLength: 128
          example: "password123"

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            user:
              $ref: "#/components/schemas/User"
            session:
              $ref: "#/components/schemas/Session"
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    LogoutResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Logged out successfully"

    SessionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          $ref: "#/components/schemas/Session"

    RefreshResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            access_token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    User:
      type: object
      required:
        - id
        - email
        - name
        - created_at
        - updated_at
        - is_active
      properties:
        id:
          type: string
          example: "user_123"
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        image:
          type: string
          format: uri
          example: "https://example.com/avatar.jpg"
        role:
          type: string
          enum: [admin, editor, viewer]
          default: viewer
          example: "viewer"
        is_active:
          type: boolean
          default: true
          example: true
        email_verified:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    Session:
      type: object
      required:
        - user
        - expires
      properties:
        user:
          $ref: "#/components/schemas/User"
        expires:
          type: string
          format: date-time
          example: "2024-12-31T23:59:59Z"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Authentication failed"
        details:
          type: array
          items:
            type: string
          example: ["Invalid email or password"]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []
